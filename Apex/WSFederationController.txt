public class WSFederationController {

    public String errorMessage {get;set;}
    private User u;
    private WS_Federation_Realm__c realm;
    private String wctx;
    private String action;
    private String preCannonicalizedAssertion = '<saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion" AssertionID="_ASSERTION_ID" IssueInstant="NOT_BEFORE" Issuer="ISSUER" MajorVersion="1" MinorVersion="1"><saml:Conditions NotBefore="NOT_BEFORE" NotOnOrAfter="NOT_ON_OR_AFTER"><saml:AudienceRestrictionCondition><saml:Audience>AUDIENCE</saml:Audience></saml:AudienceRestrictionCondition></saml:Conditions><saml:AuthenticationStatement AuthenticationInstant="NOT_BEFORE" AuthenticationMethod="urn:oasis:names:tc:SAML:1.0:am:unspecified"><saml:Subject><saml:NameIdentifier Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">SUBJECT</saml:NameIdentifier></saml:Subject></saml:AuthenticationStatement><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">SUBJECT</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName="emailaddress" AttributeNamespace="http://schemas.xmlsoap.org/ws/2005/05/identity/claims"><saml:AttributeValue>SUBJECT</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName="role" AttributeNamespace="http://schemas.microsoft.com/ws/2008/06/identity/claims"><saml:AttributeValue></saml:AttributeValue></saml:Attribute></saml:AttributeStatement></saml:Assertion>';
    private String preCannonicalizedSignedInfo = '<ds:SignedInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></ds:CanonicalizationMethod><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"></ds:SignatureMethod><ds:Reference URI="#_ASSERTION_ID"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"></ds:Transform><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></ds:DigestMethod><ds:DigestValue>DIGEST</ds:DigestValue></ds:Reference></ds:SignedInfo>';
    private String signatureBlock = '<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">SIGNED_INFO<ds:SignatureValue>SIGNATURE_VALUE</ds:SignatureValue><ds:KeyInfo><ds:X509Data><ds:X509Certificate>CERTIFICATE</ds:X509Certificate></ds:X509Data><ds:KeyValue><ds:RSAKeyValue><ds:Modulus>MODULUS</ds:Modulus><ds:Exponent>EXPONENT</ds:Exponent></ds:RSAKeyValue></ds:KeyValue></ds:KeyInfo></ds:Signature></saml:Assertion>';
    private String rstrStart = '<wst:RequestSecurityTokenResponse xmlns:wst="http://schemas.xmlsoap.org/ws/2005/02/trust"><wst:RequestedSecurityToken>';
    private String rstrEnd = '</wst:RequestedSecurityToken><wsp:AppliesTo xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"><wsa:EndpointReference xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"><wsa:Address>AUDIENCE</wsa:Address></wsa:EndpointReference></wsp:AppliesTo></wst:RequestSecurityTokenResponse>';    
    
    public WSFederationController() {
      
        u = [select id, Username, FederationIdentifier from User where id = :Userinfo.getUserId()]; 
        if ( u.FederationIdentifier == null ) {
            errorMessage = 'User does not have a valid FederationID';
        } else {
            String wtrealm = ApexPages.currentPage().getParameters().get('wtrealm');
            realm = [select name, Realm__c, Action__c, Issuer__c, EncodedPrivateKey__c, Certificate__c, Modulus__c, Exponent__c from WS_Federation_Realm__c where Realm__c = :wtrealm];
            wctx = ApexPages.currentPage().getParameters().get('wctx');
            action = realm.action__c;
        }
        
    }
    
    public String getContext(){
        return wctx;
    }
    
    public String getAction() {
        return action;
    }
    
    
    
    public String getResult(){
        
        datetime nowDt = datetime.now();
        Long nowLong = nowDt.getTime();
        datetime notBeforeDt = datetime.newInstance(nowLong - 120000);
        String notBefore = notBeforeDt.formatGmt('yyyy-MM-dd\'T\'HH:mm:ss') + 'Z';
        datetime notOnOrAfterDt = nowDt.addMinutes(5);
        String notOnOrAfter = notOnOrAfterDt.formatGmt('yyyy-MM-dd\'T\'HH:mm:ss') + 'Z';


        //Prepare the Assertion
        Double random = Math.random();
        String assertionId = EncodingUtil.convertToHex(Crypto.generateDigest('SHA1',  Blob.valueOf('assertion' + random)));
        preCannonicalizedAssertion = preCannonicalizedAssertion.replaceAll('ASSERTION_ID',assertionId);
        preCannonicalizedAssertion = preCannonicalizedAssertion.replaceAll('ISSUER',realm.issuer__c);
        preCannonicalizedAssertion = preCannonicalizedAssertion.replaceAll('AUDIENCE',realm.realm__c);
        preCannonicalizedAssertion = preCannonicalizedAssertion.replaceAll('SUBJECT',u.federationidentifier);
        preCannonicalizedAssertion = preCannonicalizedAssertion.replaceAll('NOT_BEFORE',notBefore);
        preCannonicalizedAssertion = preCannonicalizedAssertion.replaceAll('NOT_ON_OR_AFTER',notOnOrAfter);
        
        //Prepare the Digest
        Blob digest = Crypto.generateDigest('SHA1',  Blob.valueOf(preCannonicalizedAssertion));
        String digestString = EncodingUtil.base64Encode(digest);
        
        //Prepare the SignedInfo
        preCannonicalizedSignedInfo = preCannonicalizedSignedInfo.replaceAll('ASSERTION_ID',assertionId);
        preCannonicalizedSignedInfo = preCannonicalizedSignedInfo.replaceAll('DIGEST',digestString);

        //Sign the SignedInfo
        Blob privateKey = EncodingUtil.base64Decode(realm.encodedPrivateKey__c);
        Blob input = Blob.valueOf(preCannonicalizedSignedInfo);
        Blob signature = Crypto.sign('RSA-SHA1', input, privateKey);
        String signatureString = EncodingUtil.base64Encode(signature);

        //Prepare the signature block
        signatureBlock = signatureBlock.replaceAll('SIGNED_INFO',preCannonicalizedSignedInfo);
        signatureBlock = signatureBlock.replaceAll('SIGNATURE_VALUE',signatureString);
        signatureBlock = signatureBlock.replaceAll('CERTIFICATE',realm.certificate__c);
        signatureBlock = signatureBlock.replaceAll('MODULUS',realm.modulus__c);
        signatureBlock = signatureBlock.replaceAll('EXPONENT',realm.exponent__c);

        //Enveloping the signature by swapping out last element with sig + last elements of whole message
        preCannonicalizedAssertion = preCannonicalizedAssertion.replaceAll('</saml:Assertion>', signatureBlock );
        
        //return the prefix + our prepped message
        rstrEnd = rstrEnd.replaceAll('AUDIENCE',realm.realm__c);        
        return rstrStart + preCannonicalizedAssertion + rstrEnd;
        
    }
    
    
}